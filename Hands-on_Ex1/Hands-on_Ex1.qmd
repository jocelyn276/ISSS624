---
title: "Hands-on Exercise 1: Geospatial Data Wrangling with R"
editor: visual
---

## Overview

In this hands-on exercise, I learn how to import and wrangling geospatial data using appropriate R packages.

## Getting Started

The code chunk below install and load [sf](https://r-spatial.github.io/sf/) and [tidyverse](https://www.tidyverse.org/) packages into R environment.

```{r}
pacman::p_load(sf, tidyverse)

```

## 1.1 Importing Geospatial Data

### 1.1.1 Importing polygon feature data

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```

### 1.1.2 Importing polyline feature data

```{r}
cyclingpath = st_read(dsn = "data/geospatial", layer = "CyclingPath")
```

### 1.1.3 Importing GIS data in kml format

```{r}
preschool = st_read("data/geospatial/pre-schools-location-kml.kml")
```

### 1.2 Checking the content of A Simple Feature Data Frame

1.2.1 Work with *st_geomentry()*

A common way to retrieve the geometry list-column and display basic information.

```{r}
st_geometry(mpsz)
```

### 1.2.2 Work with *glimpse()*

A way to show the associated attribute information in the data frame.

```{r}
glimpse(mpsz)
```

### 1.2.3 Work with *head()*

A way to reveal complete information of a feature object. And you can select the numbers of record to display.

```{r}
head(mpsz, n=5) 
```

## 1.3 Plotting the Geospatial Data

Just looking at the feature information is not enough, we are also interested to visualise the geospatial features.

```{r}
plot(mpsz)
```

The default of plot of an sf object is a multi-plot of all attributes. We can choose to plot only the geometry by using the code chunk below.

```{r}
plot(st_geometry(mpsz))
```

Alternatively, we can choose the plot of the sf object by using a specific attribute as shown in the code chunk below.

```{r}
plot(mpsz["PLN_AREA_N"])
```

*Note: plot() is mean for plotting the geospatial object for quick look. For high cartographic quality plot, other R package such as tmap should be used.*

## 1.4 Working with Projection

Map projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.

In this section, I will learn how to project a simple feature data frame from one coordinate system to another coordinate system. The technical term of this process is called **projection transformation.**

### 1.4.1 Assigning EPSG code to a simple feature data frame

One of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing or wrongly assigned during the importing process.

Following is an example of using *st_crs()* of sf package

```{r}
st_crs(mpsz)
```

The data frame indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be **3414**.

The code chunk to correct EPSG code to data frame.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

We can check the CSR again by using the code chunk below.

```{r}
st_crs(mpsz3414)
```

Now the EPSG code is 3414.

### 1.4.2 Transforming the projection of preschool from wgs84 to svy21

In geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.

The preschool simple feature data frame reveals that it is in wgs84 coordinate system.

This is a scenario that st_set_crs() is not appropriate ans st_transform() of sf package should be used. This is because we need to reproject preschool from one coordinate system to another coordinate system.

Following code chunk is to perform the projection transformation.

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

## 1.5 Importing and Converting An Aspatial Data

Aspatial data is not a geospatial data but among the data fields, there are two fields that capture the x- and y-- coordinates of the data points.

### 1.5.1 Importing the aspatial data

Since `listings` data set is in csv format, I will use read_csv() of readr package to import the data set. The output R object is called `listings` and it is a tibble data frame.

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

We can use following code chunk to examine if the data file has been imported correctly.

```{r}
list(listings)
```

The output reveals that `listing` tibble data frame consists of 4252 rows and 16 columns. Two useful fields I am going to use in the next phase are `latitude` and `longitude` . Note that they are in decimal degree format. As a best guess, I will assume that the data is in **wgs84** Geographic Coordinate System.

### 1.5.2 Creating a simple feature data frame from an aspatial data frame

The code chunk below converts `listing` data frame into a simple feature data frame by using *st_as_sf()* of sf packages.

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

Things learn from above argument:

-   *coords* argument requires to provide the column name of the x- coordinates first then followed by the column name of the y-coordinates.

-   *crs* argument requires to provide the coordinate system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. Other country's epsg code can be searched by [epsg.io](https://epsg.io/).

-   %\>% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.

Following code chunk is used to examine the content of the newly-created simple feature data frame.

```{r}
glimpse(listings_sf)
```

Table above shows the content of `lising_sf`. Notice that a new column called `geometry` has been added into the data frame. On the other hand, the `longitude` and `latitude` columns have been dropped from the data frame.

## 1.6 Geoprocessing with sf package

**sf** package offers a wide range of geoprocessing functions. In this section, I learn [buffering](https://www.gislounge.com/buffers-in-gis/) and point in polygon count.

### 1.6.1 Buffering

The scenario:

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

The solution:

Firstly, *st_buffer()* is used to compute the 5-meter buffers around cycling paths

```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
```

This is followed by calculating the area of the buffers as shown in the code chunk below:

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly, *sum()* of Base R will be used to derive the total land involved.

```{r}
sum(buffer_cycling$AREA)
```

## 1.7 Point-in-polygon count

The scenario:

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

The solution:

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using *st_intersects().* Next, *length()* of Base R is used to calculate numbers of pre-schools that fall inside each Planning Subzone.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

I can check the summary statistics of the newly derived *PreSch Count* filed by using *summary().*

```{r}
summary(mpsz3414$`PreSch Count`)
```

To list the planning subzone with the most number of pre-school, the *top_n()* of ***dplyr*** package is used as shown in the code chunk below.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

The density of pre-school by planning subzone:

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

## 1.8 Explorotary Data Analysis

In practice, many geospatial analytics start with Explorotary Data Analysis. In this section, I will learn how to use appropriate ggplot2 functions to create functional and truthful statistical graphs for EDA purposes.

Firstly, I plot a histogram to reveal the distribution of `PreSch Density` .

```{r}
hist(mpsz3414$`PreSch Density`)
```

Following is code chunk using **ggplot2** for further customization.

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

DIY: Plot a scatterplot showing the relationship between Pre-School Density and Pre-School Count.

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`),y=`PreSch Count`))+
  geom_point(colour = "black", size=2) +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count") +
  expand_limits(x=c(0,40),y=c(0,40))
```

## 2 Choropleth Mapping with R

Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Mater Plan 2014 Subzone Boundary.

In this chapter, I learn how to plot functional and trustful choropleth maps by using an R package called ***tmap*** package.

## Getting Started

The code chunk below install and load [sf](https://r-spatial.github.io/sf/), [tmap](https://cran.r-project.org/web/packages/tmap/), [tidyverse](https://www.tidyverse.org/) packages into R environment.

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

## 2.1 Import Data into R

### 2.1.1 The Data

Two data set will be used to create the choropleth map. They are:

-   Master Plan 2014 Subzone Boundary in ESRI shapefile format. This is geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level.

-   Singapore Residents by Planning Area/Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format. This is an aspatial date file.

### 2.1.2 Importing Geospatial Data into R

Following code chunk is used to import `MP14_SUBZONE_WEB_PL` shapefile into R as a simple feature data frame.

```{r}
mpsz <- st_read(dsn = "data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")
```

check the content:

```{r}
mpsz
```

### 2.1.3 Importing Attribute Data into R

Following code chunk use *read_csv()* to import *respopagesextod2011to2020.csv* file

```{r}
popdata <- read_csv("data/aspatial/respopagesextod2011to2020.csv")
```

### 2.1.4 Data Preparation

Before a thematic map can be prepared, the data table should be prepared. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.

-   YOUNG: age group 0 to 4 until age group 20 to 24,

-   ECONOMY ACTIVE: age group 25 to 29 until age group 60 to 64,

-   AGED: age group 65 and above,

-   TOTAL: all age group, and

-   DEPENDENCY: the ratio between young and aged against economy active group

#### 2.1.4.1 Data Wrangling

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup()%>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
rowSums(.[13:15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
```

2.1.4.2 Join the attribute data and geospatial data

Firstly, the values in PA and SZ fields should be converted to uppercase because they are made up of upper- and lowercase.

```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = funs(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

Next, *left_join()* of dplyr is used to join the geographical data and attribute table using planning name e.g. *SUBZONE_N* and *SZ* as the common identifier.

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
```

```{r}
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

## 2.2 Choropleth Mapping Geospatial Data Using *tmap*

Two approaches can be used to prepare thematic map using *tmap*:

-   Plotting a thematic map quickly by using *qtm()*,

-   Plotting highly customisable thematic map by using tmap elements.

### 2.2.1 Plotting a choropleth map quickly by using *qtm()*

The code chunk below will draw a cartographic standard choropleth map

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```

### 2.2.2 Creating a choropleth map by using tmap's elements

To draw a high quality cartographic choropleth map, tmap's drawing elements should be used.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

### 2.2.3 Drawing a base map

The basic building block of tmap is tm_shape() followed by one or more layer elements such as *tm_fill()* and *tm_polygons()*

In the following code chunk, *tm.shape()* is used to define the input data and *tm_polygons()* is used to draw the planning subzone polygons.

```{r}
tm_shape(mpsz_pop2020) +
  tm_polygons()
```

### 2.2.4 Drawing a choropleth map using *tm_polygons()*

To draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, just need to assign the target variable such as *Dependency* to *tm_polygons()*

```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```

### 2.2.5 Drawing a choropleth map using *tm_fill()* and \*tm_border()\*\*

tm_polygon() is a wraper of tm_fill() and tm_border().

tm_fill() shades the polygons by using the default colour scheme and tm_border() adds the borders of the shapefile onto the choropleth map.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")
```

To add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1,  alpha = 1)
```

Notice that light-gray border lines have been added on the choropleth map.

The alpha argument is used to define transparency number between 0 and 1. By default, the alpha value of the col is 1.

Besides *alpha* argument, there are three other arguments for tm_borders(), they are:

-   *col:* border color,

-   *lwd:* border line width. Default is 1.

-   *lty:* border line type. Default is "solid".

## 2.3 Data classification methods of tmap

### 2.3.1 Plotting choropleth maps with built-in classification methods

The code chunk below shows a quantile data classification that use 5 classes.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "jenks") +
  tm_borders(alpha = 0.5)
```

In the code chunk below, *equal* data classification method is used.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

DIY1: Using Other different classification methods

The code chunk below shows a kmeans data classification that use 5 classes.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "kmeans") +
  tm_borders(alpha = 0.5)
```

The code chunk below shows a bcluster data classification that use 5 classes.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "bclust") +
  tm_borders(alpha = 0.5)
```

DIY2: Use similar classification method but with different numbers of classes.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 2,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 10,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 20,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

### 2.3.2 Plotting choropleth map with custome break

```{r}
summary(mpsz_pop2020$DEPENDENCY)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```

## 2.4 Color Scheme

2.4.1 Using ColourBrewer palette

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Blues") +
  tm_borders(alpha = 0.5)
```

To reverse the colour shading, add a "-" prefix.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "-Greens") +
  tm_borders(alpha = 0.5)
```

## 2.5 Map Layouts

### 2.5.1 Map Legend

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

### 2.5.2 Map Style

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```

### 2.5.3 Cartographic Furniture

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

### 2.5.4 Drawing Small Multiple Choropleth Maps

#### 2.5.4.1 By assigning multiple values to at least one of the aesthetic arguments

Small multiple choropleth maps are created by defining ***ncols*** in **tm_fills()**

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

#### 2.5.4.2 By defining a group-by variable in *tm_facets()*

Multiple small choropleth maps are created by using **tm_facets()**.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE, 
            drop.shapes=TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

#### 2.5.4.3 By creating multiple stand-alone maps with *tmap_arrange()*

```{r}
youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

### 2.5.5 Mappping Spatial Object Meeting a Selection Criterion

Instead of creating small multiple choropleth maps, selection function can be used to map spatial objects.

```{r}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

## 2.6 Reference

### 2.6.1 All about **tmap** package

-   [tmap: Thematic Maps in R](https://www.jstatsoft.org/article/view/v084i06)

-   [tmap](https://cran.r-project.org/web/packages/tmap/)

-   [tmap: get started!](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html)

-   [tmap: changes in version 2.0](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-changes-v2.html)

-   [tmap: creating thematic maps in a flexible way (useR!2015)](http://von-tijn.nl/tijn/research/presentations/tmap_user2015.pdf)

-   [Exploring and presenting maps with tmap (useR!2017)](http://von-tijn.nl/tijn/research/presentations/tmap_user2017.pdf)

### 2.6.2 Geospatial data wrangling

-   [sf: Simple Features for R](https://cran.r-project.org/web/packages/sf/)

-   [Simple Features for R: StandardizedSupport for Spatial Vector Data](https://journal.r-project.org/archive/2018/RJ-2018-009/RJ-2018-009.pdf)

-   [Reading, Writing and Converting Simple Features](https://cran.r-project.org/web/packages/sf/vignettes/sf2.html)

### 2.6.3 Data wrangling

-   [dplyr](https://dplyr.tidyverse.org/)

-   [Tidy data](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)

-   [tidyr: Easily Tidy Data with \'spread()\' and \'gather()\' Functions](https://cran.r-project.org/web/packages/tidyr/tidyr.pdf)
