---
title: "Hands-on_Ex2: Global and Local Measures of Spatial Autocorrelation"
date: 2022-11-25
date-format: long
editor: visual
---

## Overview

In this chapter, I am going to learn how to compute Global and Local measures of Spatial Autocorrelation(GLSA) by using **spdep** package.

## Getting Started

The case study is to discover if development is evenly distributed geographically in Hunan Province, China. And we take a selected development indicator (i.e. GDP per capita) as the spatial pattern. If the answer is No, our next question will be "is there sign of spatial clustering?". If the answer for this question is Yes, the next question will be "where are these clusters?".

Two data sets will be used in this hands-on exercise.

-   Hunan province administrative boundary layer at county level, which is in ESRI shapefile format.

-   Hunan_2012.csv contains selected Hunan's local development indicators in 2012.

Launch the packages into R environment.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

## 1.1 Getting the data into R environment

### 1.1.1 Import shapefile into R

```{r}
hunan <- st_read(dsn = "data/geospatial", layer = "Hunan")
```

### 1.1.2 Import csv file into R

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

### 1.1.3 Perform relational join

```{r}
hunan <- left_join(hunan, hunan2012)
```

### 1.1.4 Visualize Regional Development Indicator

Prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using *qtm()* of **tmap** package.

```{r}
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n=5,
          style = "equal") +
  tm_borders(alpha = 0.5)+
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n=5,
          style = "quantile") +
  tm_borders(alpha = 0.5)+
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal,
             quantile,
             asp=1,
             ncol=2)
```

## 1.2 Global Spatial Autocorrelation

In this section, I am going to learn:

-   how to compute global spatial autocorrelation

-   perform spatial complete randomness test for global spatial autocorrelation

### 1.2.1 Computing Contiguity Spatial Weights

We need to construct a spatial weights of the study area at first.

```{r}
wm_q <- poly2nb(hunan,
                queen = TRUE)
summary(wm_q)
```

### 1.2.2 Row-standardized weights matrix

Assign weights to each neighboring polygon.

```{r}
rswm_q <- nb2listw(wm_q,
                   style ="W",
                   zero.policy = TRUE)
rswm_q
```

### 1.2.3 Global Spatial Autocorrelation: Moran's I

### 1.2.3.1 Moran's I test

Use *moran.test()* to perform Moran's I statistics testing.

```{r}
moran.test(hunan$GDPPC,
           listw = rswm_q,
           zero.policy = TRUE,
           na.action = na.omit)
```

#### 1.2.3.2 Compute Monte Carlo Moran's I

Use *moran.mc()* to performs permutation test for Moran's I statistic.

```{r}
set.seed(1234)
bperm = moran.mc(hunan$GDPPC,
                 listw = rswm_q,
                 nsim = 999,
                 zero.policy = TRUE,
                 na.action = na.omit)
bperm
```

#### 1.2.3.3 Visualising Monte Carlo Moran's I

Plot a histogram of the distribution of the statistical values.

```{r}
mean(bperm$res[1:999])
var(bperm$res[1:999])
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res,
     freq=TRUE,
     breaks=20,
     xlab="Simulated Moran's I")
abline(v=0,
       col="Red")
```

Use ggplot2 to plot the values.

```{r}
ggplot(mapping = aes(bperm$res))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(x = "Simulated Moran's I",
      y = "Frequency") +
  geom_vline(aes(xintercept=0),
            color="Red", size=1)
```

### 1.2.4 Global Spatial Autocorrelation: Geary's

#### 1.2.4.1 Geary's C Test

```{r}
geary.test(hunan$GDPPC, listw=rswm_q)
```

#### 1.2.4.2 Computing Monte Carlo Geary's C

```{r}
set.seed(1234)
bperm=geary.mc(hunan$GDPPC, 
               listw=rswm_q, 
               nsim=999)
bperm
```

#### 1.2.4.3 Visualising Monte Carlo Carlo Geary's C

```{r}
mean(bperm$res[1:999])
var(bperm$res[1:999])
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="red") 
```

## 1.3 Spatial Correlogram

Spatial correlograms show how correlated are pairs of spatial observations when the distance(lag) between them.

### 1.3.1 Compute Moran's I correlogram

The code chunk below is used to compute a 6-lag spatial correlogram of GDPPC.

```{r}
MI_corr <- sp.correlogram(wm_q,
                          hunan$GDPPC,
                          order=6,
                          method="I",
                          style="W")
plot(MI_corr)
```

```{r}
print(MI_corr)
```

Not all autocorrelation values are statistically significant. We can print out the analysis result.

### 1.3.2 Compare Geary's C correlogram and plot

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```

```{r}
print(GC_corr)
```

## 1.4 Cluster and Outlier Analysis

In this section, I learned how to apply appropriate Local Indicators for Spatial Association(LISA), especially local Moran's I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province.

### 1.4.1 Computing local Moran's I

The code chunk below is used to compute local Moran's I of GDPPC2012.

```{r}
fips <- order(hunan$County)
localMI <- localmoran(hunan$GDPPC, rswm_q)
head(localMI)
```

The code chunk below is used to list the content of the local Moran matrix.

```{r}
printCoefmat(data.frame(localMI[fips,], row.names=hunan$County[fips]), check.names=FALSE)
```

#### 1.4.1.1 Mapping the local Moran's I

The code chunk below is used to append the local Moran's I dataframe onto hunan SpatialPolygonDataFrame. The output is called hunan.localMI.

```{r}
hunan.localMI <- cbind(hunan,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

#### 1.4.1.2 Mapping local Moran's I values

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col="Ii",
          style="pretty",
          palette="RdBu",
          title="local moran statistics")+
  tm_borders(alpha=0.5)
```

#### 1.4.1.3 Mapping local Moran's I p-values

Above choropleth shows that there is evidence for both positive and negative li values. However, it is useful to consider the p-values for each of there values.

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)
```

#### 1.4.1.4 Mapping both local Moran's I values and p-values

```{r}
localMI.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty", 
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)

pvalue.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```

## 1.5 Creating a LISA Cluster Map

### 1.5.1 Plotting Moran scatterplot

The Moran scatterplot is an illustration of the relationship of between the values of the chosen attribute at each location and the average value of the same attribute at neighbouring locations.

```{r}
nci <- moran.plot(hunan$GDPPC, rswm_q,
                  labels=as.character(hunan$County),
                  xlab="GDPPC 2012",
                  ylab="Spatially Lag GDP 2012")
```

### 1.5.2 Plotting Moran scatterplot with standardised variable

```{r}
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>% as.vector 
```

```{r}
nci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,
                   labels=as.character(hunan$County),
                   xlab="z-GDPPC 2012", 
                   ylab="Spatially Lag z-GDPPC 2012")
```

### 1.5.3 Preparing LISA map classes

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
```

Center the variable of interest around its mean.

```{r}
DV <- hunan$GDPPC - mean(hunan$GDPPC)
```

Center the local Moran's around the mean.

```{r}
C_mI <- localMI[,1] - mean(localMI[,1])
```

```{r}
signif <- 0.05
```

Define four quadrants

adrant\[DV \<0 & C_mI\<0\] \<- 1

quadrant\[DV \<0 & C_mI\>0\] \<- 2

quadrant\[DV \>0 & C_mI\<0\] \<- 3

```{r}
quadrant[DV >0 & C_mI>0] <- 4      
quadrant[DV <0 & C_mI<0] <- 1      
quadrant[DV <0 & C_mI>0] <- 2
quadrant[DV >0 & C_mI<0] <- 3
```

Place non-significant Moran in category 0.

```{r}
quadrant[localMI[,5]>signif] <- 0
```

### 1.5.4 Plotting LISA map

```{r}
hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
```

Plot the local Moran's I values map and its p-values next to each other.

```{r}
gdppc <- qtm(hunan, "GDPPC")

hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)

tmap_arrange(gdppc, LISAmap, asp=1, ncol=2)
```

## 1.6 Hot Spot and Cold Spot Area Analysis

"Hot spot" is a term used to describe a region or value that is higher relative to its surroundings.

### 1.6.1 Getis and Ord's G-Statistics

Getis and Ord's G-Statistics looks at neighbors within a defined proximity to identify where either high or low values cluster spatially. Hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values.

### 1.6.2 Deriving distance-based weight matrix

There are two types of distance-based proximity matrix:

-   fixed distance weight matrix;

-   adaptive distance weight matrix

#### 1.6.2.1 Deriving the centroid

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
coords <- cbind(longitude, latitude)
```

#### 1.6.2.2 Determining the cut-off distance

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

#### 1.6.2.3 Computing fixed distance weight matrix

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

```{r}
wm62_lw <- nb2listw(wm_d62, style = 'B')
summary(wm62_lw)
```

### 1.6.3 Computing adaptive distance weight matrix

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

## 1.7 Computing Gi Statistics

### 1.7.1 Gi Statistics using fixed distance

```{r}
fips <- order(hunan$County)
gi.fixed <- localG(hunan$GDPPC, wm62_lw)
gi.fixed
```

Join the Gi values to `hunan` sf data frame.

```{r}
hunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)
```

### 1.7.2 Mapping Gi values with fixed distance weights

```{r}
gdppc <- qtm(hunan, "GDPPC")

Gimap <-tm_shape(hunan.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```

### 1.7.3 Gi statistics using adaptive distance

```{r}
fips <- order(hunan$County)
gi.adaptive <- localG(hunan$GDPPC, knn_lw)
hunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

### 1.7.4 Mapping Gi values with adaptive distance weights

```{r}
gdppc<- qtm(hunan, "GDPPC")

Gimap <- tm_shape(hunan.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, 
             Gimap, 
             asp=1, 
             ncol=2)
```
