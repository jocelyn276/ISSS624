---
title: "In-class Exercise 1"
editor: visual
---

## Overview

This is my first In-class Exercise for ISSS624!

## Getting Started

The code chunk below will install and load tidyverse and sf packages.

```{r}
pacman::p_load(sf, tidyverse, spdep,tidyverse,tmap)
```

## 1. Import Data

### 1.1 Importing Geospatial Data into R

```{r}
hunan <- st_read(dsn = "data_1/geospatial", layer = "Hunan")
```

### 1.2 Importing attribute data in csv into R

```{r}
hunan2012 <- read_csv("data_1/aspatial/Hunan_2012.csv")
```

### 1.3 Performing relational join

The code chunk below will update the attribute table of *hunan's SpatialPolygonsDataFrame* with the attribute fields of *hunan2012 dataframe*.

```{r}
hunan <- left_join(hunan,hunan2012)
```

### 1.4 Visualising Regional Development Indicator

The code chunk below perform a basemap and choropleth map by using qtm() of tmap package.

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap,gdppc,asp=1,ncol=2)
```

### 1.5 Computing Contiguity Spatial Weights

#### 1.5.1 Computing (Queen) contiguity based neighbours

The code chunk below is used to compute Queen contiguity weight matrix.

```{r}
wm_q <- poly2nb(hunan, queen = TRUE)
summary(wm_q)
```

The summary report shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area unit only with one neighbour.

The code chunk below is used to see the neighbours for the first polygon in the object.

```{r}
wm_q[[1]]
```

Polygon 1 has 5 neighbours. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class. The code chunk below is used to retrieve the county name of Polygon ID=1.

```{r}
hunan$County[1]
```

The code chunk below is used to reveal the county names of the five neighbouring polygons.

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

The code chunk below is used to retrieve the GDPPC of these five neighbouring counties.

```{r}
nb1 <- wm_q[[1]]
nb2 <- hunan$GDPPC[nb1]
nb2
```

We can use str() to display the complete weight matrix.

```{r}
str(wm_q)
```

#### 1.5.2 Creating (ROOK) contiguity based neighbours

The code chunk below is used to compute Rook contiguity weight matrix.

```{r}
wm_r <- poly2nb(hunan,queen = FALSE)
summary(wm_r)
```

#### 1.5.3 Visualising Contiguity Weights

A connectivity graph takes a point and displays a line to each neighboring point. The most typically method for getting points is polygon centroids. Getting Latitude and Longitude of Polygon Centroids.

A mapping function will be used. It applies a given function to each element of a vector and returns a vector of the same length. The [map](https://purrr.tidyverse.org/reference/map.html) documentation.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

We use cbind to put longitude and latitude into the same object.

```{r}
coords <- cbind(longitude, latitude)
head(coords)
```

##### 1.5.3.1 Plotting Queen contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch=19, cex=0.6, add=TRUE, col="Red")
```

##### 1.5.3.2 Plotting Rook contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords,pch=19,cex=0.6, add=TRUE, col="Red")
```

##### 1.5.3.3 Plotting both Queen and Rook contiguity based neighbours map

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch=19, cex=0.6, add=TRUE, col="Red")
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords,pch=19,cex=0.6, add=TRUE, col="Red")
```

## 1.6 Computing distance based neighbours

In this section, I learned how to use [dnearneigh()](https://r-spatial.github.io/spdep/reference/dnearneigh.html) to derive distance-based weight matrices.

### 1.6.1 Determine the cut-off distance

Firstly, we need to determine the upper limit for distance band.

-   Use **knearneigh()** to return a matrix with the indices of points belonging to the set of the k nearest neighbors of each other.

-   Use **knn2nb()** to convert the knn object returned by knearneigh() into a neighbor list of class nb with a list of integer vectors containing neighbour region number ids.

-   Use **nbdists()** to return the length of neighbour relationship edges. The function returns in the units of the coordinates if the coordinates are projected, otherwise in **km**.

-   Use **unlist()** to remove the list structure of the returned object.

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The largest first nearest neighbor distance is 61.79km, and we will set 62km as the upper distance bound.

### 1.6.2 Computing fixed distance weight matrix

The code chunk below is used to compute the distance weight matrix.

```{r}
wm_d62 <- dnearneigh(coords,0,62,longlat = TRUE)
wm_d62
```

Next, use *str()* to display the content of wm_d62 weight matrix.

```{r}
str(wm_d62)
```

Another way to dispaly the structure of the weight matrix is combine *table()* and *card()*.

```{r}
table(hunan$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

#### 1.6.2.1 Plotting fixed distance weight matrix

The code chunk below is used to plot the distance weight matrix.

```{r}
plot(hunan$geometry,border="lightgrey")
plot(wm_d62,coords,add=TRUE)
plot(k1,coords,add=TRUE,col="red",length=0.08)
```

Red lines show the links of 1st nearest neighbors and black lines show the links of neighbours within the cut-off distance of 62km.

We can also plot these two lines in two graphs.

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(k1,coords,add=TRUE,col="red",length=0.08, main="1st nearest neighbours")
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE, pch=19, cex=0.6, main = "Distance link")
```

### 1.6.3 Computing adaptive distance weight matrix

K-nearest neighbours can be used to control the numbers of neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

Use *str()* to display the content of the matrix

```{r}
str(knn6)
```

Each county has exact six neighbours.

#### 1.6.3.1 Plotting distance based neighbors

```{r}
plot(hunan$geometry, border ="Lightgrey")
plot(knn6, coords, pch=19, cex=0.6, add=TRUE, col="Red")
```

## 1.7 Weights based on IDW

In this section, I learned how to derive a spatial weight matrix based on Inversed Distance Weighing method.

Firstly, use ***nbdists()*** to compute the distances between areas.

```{r}
dist <- nbdists(wm_q, coords, longlat=TRUE)
ids <- lapply(dist, function(x)1/(x))
ids
```

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight(style="W"). It has one drawback that polygon along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

To see the weight of the first polygon

```{r}
rswm_q$weights[1]
```

Each neighbor is assigned a 0.2 of the total weight. This means that when R computes the average neighbouring income values, each neighbour's income will be multiplied by 0.2 before being tailed.

The code chunk below can be used to derive a non standardized weight matrix.

```{r}
rswm_ids <- nb2listw(wm_q, glist = ids, style="B", zero.policy = TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

## 1.8 Application of Spatial Weight Matrix

### 1.8.1 Spatial lag with row-standardized weights

Compute the GDPPC value for each polygon. These values are often referred to as **spatially lagged values**.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

The code chunk below is previously retrieved the GDPPC of Anxiang's five neighbouring counties.

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

The code chunk below is used to append the spatial lag GDPPC values to `hunan` sf data frame.

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan, lag.res)
```

```{r}
head(hunan)
```

Then we plot both the GDPPC and spatial lag GDPPC for comparison.

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

### 1.8.2 Spatial lag as a sum of neighbouring values

We can calculate spatial lag as a sum of neighbouring values by assigning binary weights.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x+1)
b_weights2 <- nb2listw(wm_q,
                      glist = b_weights,
                      style = "B")
b_weights2
```

Then we use **lag.listw()** to compute a lag variable from our weight and GDPPC.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

```{r}
lag_sum
```

The code chunk below is used to append the lag_sum GDPPC values to `hunan` sf data frame.

```{r}
hunan <- left_join(hunan, lag.res)
```

Plot both the GDPPC and Spatial Lag Sum GDPPC for comparison.

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

### 1.8.3 Spatial Window Average

The spatial window average uses row-standardized weights and includes the diagonal element.

```{r}
wm_q1 <- wm_q
include.self(wm_q1) # To add the diagonal element to the neighbor list
```

The code chunk below is used to obtain weights with **nb2listw()**

```{r}
wm_q1 <- nb2listw(wm_q1)
wm_q1
```

Create the lag variable from our weight structure and GDPPC variable.

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_q1,hunan$GDPPC)
lag_w_avg_gpdpc
```

Convert the lag variable listw object to a data.frame by using *as.data.frame()*

```{r}
lag.list.wm_q1 <- list(hunan$NAME_3, lag.listw(wm_q1, hunan$GDPPC))
lag_wm_q1.res <- as.data.frame(lag.list.wm_q1)
colnames(lag_wm_q1.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

Then append *lag_window_avg GDPPC values* to hunan sf data.frame by using *left.join().*

```{r}
hunan <- left_join(hunan, lag_wm_q1.res)
```

Lastly, plot the GDPPC and lag_window_avg GDPPC.

```{r}
gdppc <- qtm(hunan, "GDPPC")
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(gdppc, w_avg_gdppc, asp=1, ncol=2)
```

### 1.8.4 Spatial Window Sum

The spatial window sum is the counter part of the window average without using row-standardized weights.

```{r}
wm_q1 <- wm_q
include.self(wm_q1)
wm_q1
```

Assign binary weights to the neighbor structure that includes the diagonal element.

```{r}
b_weights <- lapply(wm_q1, function(x) 0*x + 1)
b_weights[1]
```

Assign weight values

```{r}
b_weights2 <- nb2listw(wm_q1, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

Compute the lag variable

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

Convert the lag variable listw object to a data.frame.

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

Append w_sum GDPPC to `hunan` sf data.frame

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

Plot the GDPPC and lag_window_sum GDPPC.

```{r}
gdppc <- qtm(hunan, "GDPPC")
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)
```
