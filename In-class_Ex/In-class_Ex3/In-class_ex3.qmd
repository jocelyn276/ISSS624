---
title: "In-class_ex3"
execute: 
  echo: false
  warning: false
  message: false
  fig-retine: 3
date: 2022-12-3
date-format: long
editor: visual
---

In this in-calss exercise, I am going to learn ClustGeo Method to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis.

## Load R packages into R environment

```{r}
pacman::p_load(rgdal, spdep, tmap, sf, ClustGeo, 
               ggpubr, cluster, factoextra, NbClust,
               heatmaply, corrplot, psych, tidyverse)
```

## Data importing and processing

The detailed process is in Hands-on Exercise 3.

```{r}
ict <- read_csv ("data/aspatial/Shan-ICT.csv")
ict_derived <- ict %>%
  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%
  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%
  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%
  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%
  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%
  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%
  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,
         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,
         `TT_HOUSEHOLDS`=`Total households`,
         `RADIO`=`Radio`, `TV`=`Television`, 
         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,
         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) 

shan_sf <- st_read(dsn = "data/geospatial", 
                   layer = "myanmar_township_boundaries") %>%
 filter(ST %in% c("Shan (East)", "Shan (West)", "Shan (South)", "Shan (North)"))

shan_sf <- left_join(shan_sf, 
                     ict_derived, 
                     by=c("TS_PCODE"="TS_PCODE"))
write_rds(shan_sf, "data/rds/shan_sf.rds")

cluster_vars <- shan_sf %>%
  st_set_geometry(NULL) %>%
  select("TS.x", "RADIO_PR", "TV_PR", "LLPHONE_PR", "MPHONE_PR", "COMPUTER_PR")
row.names(cluster_vars) <- cluster_vars$"TS.x"
shan_ict <- select(cluster_vars, c(2:6))
head(shan_ict, 10)
```

## Ward-like hierarchical clustering: ClustGeo

```{r}
proxmat <- dist(shan_ict, method = 'euclidean')
```

ClustGeo package provides function called `hclustgeo()` to perform a typical Ward-like hierarchical clustering.

The code chunk below is used to perform non-spatially constrained hierarchical clustering.

```{r}
nongeo_cluster <- hclustgeo(proxmat)
plot(nongeo_cluster, cex = 0.5)
rect.hclust(nongeo_cluster, 
            k = 6, 
            border = 2:5)
```

## Mapping the clusters found

```{r}
groups <- as.factor(cutree(nongeo_cluster, k=6))
```

```{r}
shan_sf_ngeo_cluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`)
```

```{r}
qtm(shan_sf_ngeo_cluster, "CLUSTER")
```

## Spatially Constrained Hierarchical Clustering

The code chunk below is used to derive a spatial distance matrix by using st_distance().

```{r}
dist <- st_distance(shan_sf, shan_sf)
distmat <- as.dist(dist)
```

The code chunk below is used to determine a suitable value for the mixing parameter alpha shown.

```{r}
cr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)
```

We are going to show alpha=0.3.

```{r}
clustG <- hclustgeo(proxmat, distmat, alpha = 0.3)
```

Derive the cluster object.

```{r}
groups <- as.factor(cutree(clustG, k=6))
```

Join the group list with shan_sf polygon feature data frame.

```{r}
shan_sf_Gcluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`)
```

Plot the clusters.

```{r}
qtm(shan_sf_Gcluster, "CLUSTER")
```
