---
title: "Take-home Exercise 2"
execute:
  warning: false
  message: false
date: 2022-12-14
date-format: long
editor: visual
---

# 1. Overview

## 1.1 Background

Regionalisation is a special kind of clustering where the objective is to group observations which are similar in their statistical attributes and spatial location. In this sense, regionalisation embeds the same logic as standard clustering techniques and applies a series of geographical constraints.

## 1.2 Problem Statement

In this exercise, we are going to regionalise Nigeria at LGA level by following attributes:

-   Total number of functional water points

-   Total number of non-functional water points

-   Percentage of functional water points

-   Percentage of non-functional water points

-   Percentage of main water point technology (i.e. Hand Pump)

-   Percentage of usage capacity (i.e. \< 1000, \>=1000)

-   Percentage of rural water points

Two different clustering will be applied:

1.  Conventional Clustering, including hierarchical clustering and K-means clustering

2.  Spatially Constrained Clustering, including SKATER and ClustGeo Method

## 1.3 Data Used

#### Aspatial data

Data from [Water Point Data Exchange(WPdx)](https://www.waterpointdata.org/access-data/) in WPdx+, an enhanced version of WPdx-Basic dataset.

#### Geospatial data

Nigeria Level-2 Administrative Boundary(local government area), which can be downloaded from <https://data.humdata.org/dataset/cod-ab-nga>.

## 1.4 R package

The packages will be used for this analysis:

Spatial data handling: ***sf***, ***rgdal***, ***spdep***

Attribute data handling: ***tidyverse***

Choropleth mapping: ***tmap***

Multivariate data analysis and visualisation: ***corrplot***, ***heatmaply***, ***ggpubr*** and ***facteoxtra***

Cluster Analysis: ***cluster***, ***ClustGeo, NbClust***

```{r}
pacman::p_load(sf, rgdal,spdep, tidyverse, tmap, funModeling,
               cluster, ClustGeo, NbClust,
               ggpubr, ,factoextra,
               heatmaply, corrplot)
```

# 2. Data Processing and Wrangling

## 2.1 Importing water point data

```{r}
#| eval: false
wp_nga <- read_csv("data/aspatial/WPdx.csv") %>%
  filter(`#clean_country_name` == "Nigeria")
```

Convert Well Known Text data

There is a column called *New Georeferenced Column* which represent spatial data in a textual format. And this kind of text file is popularly known as Well Known Text(wkt).

There are two steps to convert this wkt format into a sf data frame.

Firstly, `st_as_sfc()` of sf package is used to derive a new field called Geometry as shown in the code chunk below

```{r}
#| eval: false
wp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)
```

Next, `st_sf()` will be used to convert the tibble data frame into sf data frame.

```{r}
#| eval: false
wp_sf <- st_sf(wp_nga, crs=4326) 
```

The code chunk below is used to display the general information about the data frame.

```{r}
#| eval: false
head(wp_sf)
```

## 2.2 Importing Nigeria LGA level boundary data

```{r}
#| eval: false
nga <- st_read(dsn="data/geospatial",
                   layer="nga_admbnda_adm2_osgof_20190417",
               crs=4326)
```

### 2.2.1 Checking duplicate area name

`duplicated` can retrieve which elements of a vector or data frame are duplicate. The code chunk below can be used to determine the duplicate elements.

```{r}
#| eval: false
duplicate_area <- nga$`ADM2_EN`[nga$`ADM2_EN` %in% nga$`ADM2_EN`[duplicated(nga$`ADM2_EN`)]]

index <- which(nga$`ADM2_EN` %in% nga$`ADM2_EN`[duplicated(nga$`ADM2_EN`)])

duplicate_area
index
```

There are 12 duplicate elements. Then we can check the location of each element by using tmap.

```{r}
#| eval: false
tmap_mode("view")
tm_shape(nga[nga$`ADM2_EN`  %in% duplicate_area,]) +
  tm_polygons()
```

Then we can compare the map with the google map, and we can find the correct ADM2_EN.

| Index | Original ADM2_EN | Correct ADM2_EN |
|-------|------------------|-----------------|
| 94    | Bassa            | Bassa(Kogi)     |
| 95    | Bassa            | Bassa(Plateau)  |
| 304   | Ifelodun         | Ifelodun(Kwara) |
| 305   | Ifelodun         | Ifelodun(Osun)  |
| 355   | Irepodun         | Irepodun(Kwara) |
| 356   | Irepodun         | Irepodun(Osun)  |
| 519   | Nasarawa         | Nassarawa       |
| 520   | Nasarawa         | Nasarawa        |
| 546   | Obi              | Obi(Benue)      |
| 547   | Obi              | Obi(Nasarawa)   |
| 693   | Surulere         | Surulere(Lagos) |
| 694   | Surulere         | Surulere(Oyo)   |

The code chunk below is used to update the correct ADM2_EN.

```{r}
#| eval: false
nga$`ADM2_EN` [c(94,95,304,305,355,356,519,546,547,693,694)] <- c("Bassa(Kogi)","Bassa(Plateau)",
                                                                               "Ifelodun(Kwara)","Ifelodun(Osun)",
                                                                               "Irepodun (Kwara)","Irepodun(Osun)",
                                                                               "Nassarawa","Obi(Benue)","Obi(Nasarawa)",
                                                                               "Surulere(Lagos)","Surulere(Oyo)")
```

We can whether duplicate elements exist or not now.

```{r}
#| eval: false
length(nga$`ADM2_EN`[ nga$`ADM2_EN` %in% nga$`ADM2_EN`[duplicated(nga$`ADM2_EN`)] ])
```

## 2.3 Point in Polygon Overlay

Although *wp_sf* sf data frame consists of a field called *#clean_adm2* which by right should provides the LGA name of the water point located. However, it is always a good practice to be more caution when dealing with data accuracy.

We are going to use a geoprocessing function (or commonly know as GIS analysis) called **point-in-polygon overlay** to transfer the attribute information in *nga* sf data frame into *wp_sf* data frame.

```{r}
#| eval: false
wp_sf <- st_join(wp_sf, nga)
```

`write_rds`of readr package is used to save the *wp_sf* data frame into an output file in *rds* data format. The output file is called wp_nga and saved in data sub-folder.

```{r}
#| eval: false
wp_nigeria <- write_rds(wp_sf,
                    "data/wp_nigeria.rds")
```

## 2.4 Data Wrangling

### 2.4.1 Recode NA values into string

The code chunk below is used to recode all the NA values in \#*status_clean* field into Unknown.

```{r}
#| eval: false
wp_nigeria <- read_rds("data/wp_nigeria.rds") %>%
  mutate(`#status_clean`= replace_na(`#status_clean`, "Unknown"))
```

```{r}
#| eval: false
freq(data=wp_nigeria, 
     input = '#status_clean')
```

### 2.4.2 Extracting Water Point Data by functional, non-functional and unknown

We are going to extract water point records by using *#status_clean* column.

The code chunk below is used to extract functional water points.

```{r}
#| eval: false
wpt_functional <- wp_nigeria %>%
  filter(`#status_clean` %in%
           c("Functional", 
             "Functional but not in use",
             "Functional but needs repair"))
```

The code chunk below is used to extract non-functional water points.

```{r}
#| eval: false
wpt_nonfunctional <- wp_nigeria %>%
  filter(`#status_clean` %in%
           c("Abandoned/Decommissioned", 
             "Abandoned",
             "Non-Functional",
             "Non functional due to dry season",
             "Non-Functional due to dry season"))
```

The code chunk below is used to extract unknown water points.

```{r}
#| eval: false
wpt_unknown <- wp_nigeria %>%
  filter(`#status_clean`  == "Unknown")
```

### 2.4.3 Extracting Water Point Data by main technology

The code chunk below is used to display the distribution of technology adopted by water points.

```{r}
#| eval: false
freq(data=wp_nigeria, 
     input = '#water_tech_category')
```

We are going to categorize the technology into three types: Hand Pump, Mechanized Pump and Unknown(includes NA values, Tapstand, Rope and Bucket).

The code chunk below is used to extract water points by category.

```{r}
#| eval: false
wpt_handpp <- wp_nigeria %>%
  filter(`#water_tech_category` %in%
           c("Hand Pump"))

wpt_mechanizedpp <- wp_nigeria %>%
  filter(`#water_tech_category` %in%
           c("Mechanized Pump"))
```

### 2.4.4 Extracting Water Point Data by usage capacity

The code chunk is used to display the distribution of usage capacity of water points.

```{r}
#| eval: false
freq(data=wp_nigeria, 
     input = 'usage_capacity')
```

The code chunk below is used to split *usage\_*capacity into two categories (\<1000 and \>=1000).

```{r}
#| eval: false
wpt_usage_cap_below_1k <- wp_nigeria %>%
  filter(`usage_capacity` %in%
           c("50","250","300"))

wpt_usage_cap_above_1k <- wp_nigeria %>%
  filter(`usage_capacity` %in%
           c("1000"))
```

### 2.4.5 Extracting Rural Water Point Data

The code chunk below is used to display the distribution of rural and urban water points.

```{r}
#| eval: false
freq(data=wp_nigeria, 
     input = 'is_urban')
```

The code chunk below is used to extract the number of rural water points at LGA level.

```{r}
#| eval: false
wpt_rural <- wp_nigeria %>%
  filter(`is_urban` %in%
           c("FALSE"))
```

### 2.4.6 Performing Point-in-Polygon Count

The code chunk below is going to create a new data frame *nigeria_wp* to store the newly-derived variables.

```{r}
#| eval: false
nigeria_wp <- nga %>% 
  mutate(`total wpt` = lengths(
    st_intersects(nga, wp_nigeria))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga, wpt_unknown))) %>%
  mutate(`wpt handpump`=lengths(
    st_intersects(nga, wpt_handpp))) %>%
  mutate(`wpt mechpump`=lengths(
    st_intersects(nga, wpt_mechanizedpp))) %>%
  mutate(`wpt usage_below_1k`=lengths(
    st_intersects(nga, wpt_usage_cap_below_1k))) %>%
  mutate(`wpt usage_above_1k`=lengths(
    st_intersects(nga, wpt_usage_cap_above_1k))) %>%
  mutate(`wpt rural`=lengths(
    st_intersects(nga, wpt_rural)))
```

The code chunk below is used to generate related percentage.

```{r}
#| eval: false
nigeria_wp <- nigeria_wp %>%
  mutate(`pct_functional` = `wpt functional`/`total wpt`*100) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`*100) %>%
  mutate(`pct_handpump` = `wpt handpump`/`total wpt`*100) %>%
  mutate(`pct_mechpump` = `wpt mechpump`/`total wpt`*100) %>%
  mutate(`pct_usage_below_1k` = `wpt usage_below_1k`/`total wpt`*100) %>%
  mutate(`pct_usage_above_1k` = `wpt usage_above_1k`/`total wpt`*100) %>%
  mutate(`pct_rural` = `wpt rural`/`total wpt`*100) %>%
  select(3:4, 9:10, 18:33)
```

```{r}
#| eval: false
write_rds(nigeria_wp, "data/nigeria_wp.rds")
```

The code chunk below is used to read the data file into R environment.

```{r}
nigeria_wp <- read_rds("data/nigeria_wp.rds")
```

The code chunk below is to show the summary.

```{r}
summary(nigeria_wp)
```

According to the summary result, we can find that there are 13 rows have NAs. Because the numbers of their total water points are 0, and respective percentage shows as NaN. The code chunk below is used to fill NaN with 0.

```{r}
nigeria_wp$`pct_non-functional`[is.na(nigeria_wp$`pct_non-functional`)] = 0
nigeria_wp$`pct_functional`[is.na(nigeria_wp$`pct_functional`)] = 0
nigeria_wp$`pct_handpump`[is.na(nigeria_wp$`pct_handpump`)] = 0
nigeria_wp$`pct_mechpump`[is.na(nigeria_wp$`pct_mechpump`)] = 0
nigeria_wp$`pct_usage_below_1k`[is.na(nigeria_wp$`pct_usage_below_1k`)] = 0
nigeria_wp$`pct_usage_above_1k`[is.na(nigeria_wp$`pct_usage_above_1k`)] = 0
nigeria_wp$`pct_rural`[is.na(nigeria_wp$`pct_rural`)] = 0
```

# 3. Exploratory Data Analysis(EDA)

## 3.1 EDA using statistical graphics

The code chunk below is used to display individual histogram for each variables.

```{r}
nonfunctional <- ggplot(data=nigeria_wp, 
             aes(x= `pct_non-functional`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

functional <- ggplot(data=nigeria_wp, 
             aes(x= `pct_functional`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

handpump <- ggplot(data=nigeria_wp, 
             aes(x= `pct_handpump`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

mechpump <- ggplot(data=nigeria_wp, 
             aes(x= `pct_mechpump`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

usage_below_1k <- ggplot(data=nigeria_wp, 
             aes(x= `pct_usage_below_1k`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

usage_above_1k <- ggplot(data=nigeria_wp, 
             aes(x= `pct_usage_above_1k`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

rural <- ggplot(data=nigeria_wp, 
             aes(x= `pct_rural`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

ggarrange(nonfunctional, functional, handpump, mechpump,
          usage_below_1k, usage_above_1k, rural,
          ncol = 3, 
          nrow = 3)
```

## 3.2 EDA using choropleth map

The code chunk below is used to plot the choropleth map to reveal the geographical distribution of the variables.

```{r}
non_functional.map <- tm_shape(nigeria_wp) + 
  tm_fill(col = "pct_non-functional",
          n = 5,
          style = "jenks", 
          title = "Pct of Non-functional WPs",
          legend.hist = TRUE,
          palette="-RdBu") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.outside = TRUE) 

functional.map <- tm_shape(nigeria_wp) + 
  tm_fill(col = "pct_functional",
          n = 5,
          style = "jenks", 
          title = "Pct of Functional WPs",
          legend.hist = TRUE,
          palette="-RdBu") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.outside = TRUE)

handpump.map <- tm_shape(nigeria_wp) + 
  tm_fill(col = "pct_handpump",
          n = 5,
          style = "jenks", 
          title = "Pct of Handpump WPs",
          legend.hist = TRUE,
          palette="-RdBu") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.outside = TRUE)

mechpump.map <- tm_shape(nigeria_wp) + 
  tm_fill(col = "pct_mechpump",
          n = 5,
          style = "jenks", 
          title = "Pct of Mechanized WPs",
          legend.hist = TRUE,
          palette="-RdBu") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.outside = TRUE)

usage_below_1k.map <- tm_shape(nigeria_wp) + 
  tm_fill(col = "pct_usage_below_1k",
          n = 5,
          style = "jenks", 
          title = "Pct of Usage Capacity Below 1000 WPs",
          legend.hist = TRUE,
          palette="-RdBu") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.outside = TRUE)

usage_above_1k.map <- tm_shape(nigeria_wp) + 
  tm_fill(col = "pct_usage_above_1k",
          n = 5,
          style = "jenks", 
          title = "Pct of Usage Capacity Above 1000 WPs",
          legend.hist = TRUE,
          palette="-RdBu") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.outside = TRUE)

rural.map <- tm_shape(nigeria_wp) + 
  tm_fill(col = "pct_rural",
          n = 5,
          style = "jenks", 
          title = "Pct of Rural-based WPs",
          legend.hist = TRUE,
          palette="-RdBu") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.outside = TRUE)

tmap_arrange(non_functional.map, functional.map, handpump.map,
             mechpump.map, usage_below_1k.map, usage_above_1k.map,
             rural.map,
             asp=NA, ncol=2)
```

# 4. Correlation Analysis

Before we perform cluster analysis, it it important for us to ensure that the cluster variables are not highly correlated.

The code chunk below is used to visualise and analyse the correlation of the input variables.

```{r}
str(nigeria_wp)
```

```{r}
nigeria_var <- st_drop_geometry(nigeria_wp)

cluster_vars.cor <- cor(nigeria_var[,14:20])
corrplot.mixed(cluster_vars.cor,
         lower = "ellipse", upper = "number",
               tl.pos = "lt", diag = "l", tl.col = "black", 
        number.cex = 0.6)
```

The correlation plot above shows that 4 variables (pct_handpump, pct_mechpump, pct_usage_below_1k, pct_usage_above_1k) are highly correlated. So only ***pct_handpump*** will be kept for the following clustering.

# 5. Conventional Clustering: Hierarchical Clustering and K-means Clustering

## 5.1 Extracting clustering variables

The code chunk below is used to extract clustering variables.

```{r}
cluster_vars <- nigeria_wp %>%
  st_set_geometry(NULL) %>%
  select("ADM2_EN","pct_functional", "pct_non-functional", "pct_handpump", "pct_rural")
head(cluster_vars,10)
```

Next, we are going to change the row name to LGA name and delete the row *ADM2_EN*.

```{r}
row.names(cluster_vars) <- cluster_vars$"ADM2_EN"
lga_ict <- select(cluster_vars, c(2:5))
head(lga_ict,10)
```

## 5.2 Data Standardisation

In order to avoid the cluster analysis result is biased to clustering variables, it is useful to standardise the input variables before performing cluster analysis.

The code chunk below is used to standardize the clustering variables by using z-score methods.

```{r}
lga_ict.z <- scale(lga_ict)
describe(lga_ict.z)
```

## 5.3 Visualising the standardised clustering variables

Before performing clustering analysis, it is good to visualise the distribution of variables.

```{r}
lga_ict_z_df <- as.data.frame(lga_ict.z)
functional <- ggplot(data=lga_ict_z_df, 
       aes(x=`pct_functional`)) +
  geom_histogram(bins=10, 
                 color="black",
                 fill="#E69F00") +
  ggtitle("Functional Z-score") +
  theme(title=element_text(size=5,color="black",face="bold"))

nonfunctional <- ggplot(data=lga_ict_z_df, 
       aes(x=`pct_non-functional`)) +
  geom_histogram(bins=10, 
                 color="black", 
                 fill="#E69F00") +
    ggtitle("Non-Functional Z-score") +
  theme(title=element_text(size=5,color="black",face="bold"))

handpump <- ggplot(data=lga_ict_z_df, 
       aes(x=`pct_handpump`)) +
  geom_histogram(bins=10, 
                 color="black", 
                 fill="#E69F00") +
  ggtitle("Handpump Z-score") +
  theme(title=element_text(size=5,color="black",face="bold"))

rural <- ggplot(data=lga_ict_z_df, 
       aes(x=`pct_rural`)) +
  geom_histogram(bins=10, 
                 color="black", 
                 fill="#E69F00") +
  ggtitle("Rural Z-score") +
  theme(title=element_text(size=5,color="black",face="bold" ))

ggarrange(functional, nonfunctional, handpump, rural,
          ncol = 4,
          nrow = 1)
```

## 5.4 Computing proximity matrix

We are going to use *dist()* function to calculate the distance matrix in the code chunk below, and going to use *euclidean* method.

```{r}
proxmat <- dist(lga_ict.z, method = 'euclidean')
```

## 5.5 Computing hierarchical clustering

*hclust()* can be used to perform hierarchical clustering. It supports eight clustering algorithms: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).

The code chunk below is used to compute hierarchical clustering and adopt *centroid* method.

```{r}
hclust_ward <- hclust(proxmat, method = 'ward.D')
```

### 5.5.1 Selecting the optimal clustering algorithm by hierarchical clustering

*agnes()* function of **cluster** package cane calculate the agglomerative coefficient, which measures the amount of clustering structure.

```{r}
m <- c( "average", "single", "complete", "ward", "weighted")
names(m) <- m

ac <- function(x) {
  agnes(lga_ict.z, method = x)$ac
}

map_dbl(m, ac)
```

According to the result, we can find that *ward* method shows the highest value, which indicates a stronger clustering structure. Hence, only *ward* method will be used in the subsequent analysis.

### 5.5.2 Determining Optimal Clusters

There are three ways to determine the optimal clusters.

-   Elbow method

-   Average Silhouette Method

-   Gap Statistic Method

We are going to adopt *Gap Statistic Method* to determine the optimal clusters. The gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic. This means that the clustering structure is far away from the random uniform distribution of points.

```{r}
set.seed(1234)
gap_stat <- clusGap(lga_ict.z, 
                    FUN = hcut, 
                    nstart = 25, 
                    K.max = 10, 
                    B = 50)
print(gap_stat, method = "firstmax")
```

Then, we can visualize the cluster plots.

```{r}
fviz_gap_stat(gap_stat)
```

According to the graph, the recommended number of clusters is 4, which has highest Gap Statistics.

### 5.5.3 Interpreting the dendrogram

```{r}
plot(hclust_ward,cex=0.6)
rect.hclust(hclust_ward, 
            k = 4, 
            border = 2:5)
```

### 5.5.4 Visually-driven hierarchical clustering analysis

We are going to build both interactive and static cluster heatmaps with the help of ***heatmaply()*** package.

#### 5.5.4.1 Transforming the data frame into a matrix

The code chunk below is used to transform *lga_ict* data frame into a data matrix.

```{r}
lga_ict_mat <- data.matrix(lga_ict.z)
```

#### 5.5.4.2 Plotting Interactive Cluster Heatmap

```{r}
heatmaply(normalize(lga_ict_mat),
          Colv=NA,
          dist_method = "euclidean",
          hclust_method = "ward.D",
          seriate = "OLO",
          colors = Reds,
          k_row = 4,
          margins = c(NA,200,60,NA),
          fontsize_row = 3,
          fontsize_col = 3,
          main="Geographic Segmentation of Nigeria LGA by ICT indicators",
          xlab = "Indicators",
          ylab = "Nigeria Local Government Area"
          )
```

### 5.5.5 Mapping the clusters formed

The code chunk below is used to derive a 4-cluster model based on hierarchical clustering.

```{r}
groups <- as.factor(cutree(hclust_ward, k=4))
lga_cluster <- cbind(nigeria_wp, as.matrix(groups)) %>%
  rename(`Hierarchical Cluster`=`as.matrix.groups.`)
hcluster_plot <- tm_shape(lga_cluster) +
  tm_polygons("Hierarchical Cluster", title = "Hierarchical Clusters", palette = "RdYlBu") +
  tm_layout(main.title = "Heirarchical Clustering",
            main.title.position = "center",
            main.title.size = 0.8,
            legend.height = 0.3, 
            legend.width = 0.2,
            legend.text.size = 0.6,
            legend.title.size = 1,
            frame = TRUE) +
  tm_borders(alpha = 0.5)
hcluster_plot
```

## 5.6 Selecting the optimal clustering algorithm by K-means clustering

As mentioned before, there are three ways to determine the optimal clusters. In section 4.5.1, we use gap statistics for hierarchical clustering. Now we are going to adopt ***Elbow Method*** and ***Average Silhouette Method*** for k-means clustering.

### 5.6.1 Elbow Method

The Elbow Method looks at the total WSS(within-cluster sum of Square) as a function of the number clusters.

```{r}
set.seed(12345)
fviz_nbclust(lga_ict.z, kmeans, method = "wss") +
  geom_vline(xintercept = 4, linetype = 2)
```

The plot between the number of clusters and the total within the sum of squares is shown in the figure above. The optimal number of clusters, is the point at which the value begins to decrease slowly; this is known as the 'elbow point', and the elbow point in the plot is k = 4.

### 5.6.2 **Average Silhouette Method**

Sometimes, the Elbow Method is ambiguous. An alternative method is the average silhouette method.

```{r}
fviz_nbclust(lga_ict.z, kmeans, method = "silhouette")+
  labs(subtitle = "Silhouette method")
```

Based on the above figure, 4 clusters suggested.

### 5.6.3 Plot K-means

```{r}
kmm <- kmeans(lga_ict.z,4,nstart = 25)
fviz_cluster(kmm, data = lga_ict.z,
             geom = "point",
             ellipse.type = "convex", 
             ggtheme = theme_bw()
             )
```

### 5.6.4 Mapping the clusters formed

```{r}
lga_kmcluster <- cbind(nigeria_wp, as.matrix(kmm$cluster)) %>%
  rename(`Kmeans Cluster`=`as.matrix.kmm.cluster.`)
kmcluster_plot <- tm_shape(lga_kmcluster) +
  tm_polygons("Kmeans Cluster", title = "K-means Clusters", palette = "RdYlBu") +
  tm_layout(main.title = "K-means Clustering",
            main.title.position = "center",
            main.title.size = 0.8,
            legend.height = 0.3, 
            legend.width = 0.2,
            legend.text.size = 0.6,
            legend.title.size = 1,
            frame = TRUE) +
  tm_borders(alpha = 0.5)
kmcluster_plot
```

Now let's plot two maps together to show different clustering.

```{r}
tmap_arrange(hcluster_plot, kmcluster_plot)
```

The choropleth maps show the clustering result geographically. The areas are very fragmented, which is a limitation of non-spatial clustering algorithm.

# 6. Spatially Constrained Clustering: SKATER approach

## 6.1 Converting into SpatialPolygonsDataFrame

Firstly, we need to convert `nigeria_wp` into SpatialPolygonsDataFrame. Because SKATER only support **sp** objects.

The code chunk below is used to convert `nigeria_wp` into SpatialPolygonsDataFrame called `nigeria_wp_sp`

```{r}
nigeria_wp_sp <- as_Spatial(nigeria_wp)
```

## 6.2 Computing Neighbour List

The code chunk below is used to compute the neighbours list from polygon list.

```{r}
nglga.nb <- poly2nb(nigeria_wp_sp)
summary(nglga.nb)
```

There is one area(86) that has no neighbour. For the convenience of subsequent analysis, we drop it now. The code chunk below is used to delete corresponding item.

```{r}
nigeria_wp_cb <- nigeria_wp[-86,]
nigeria_wp_cb_sp <- as_Spatial(nigeria_wp_cb)
nglga.nb <- poly2nb(nigeria_wp_cb_sp)
summary(nglga.nb)
```

Now we can find that there is no region without any links.

## 6.3 Computing Minimum Spanning Tree

### 6.3.1 Calculating edge costs

The code chunk below is used to compute the cost of each edge.

```{r}
lcosts <- nbcosts(nglga.nb,lga_ict)
```

Next, we are going to convert the neighbour list to a list weights object by specifying the above *locsts* as the weigts.

```{r}
nglga.w <- nb2listw(nglga.nb, 
                   lcosts, 
                   style="B")
summary(nglga.w)
```

### 6.3.2 Computing minimum spanning tree

**mstree()** function of **spdep** packages can be used to compute minimum spanning tree.

```{r}
nglga.mst <- mstree(nglga.w)
```

We can have a look at the dimension of the MST.

```{r}
dim(nglga.mst)
```

We can plot the MST to show the observation numbers of the nodes along with the LGA boundaries.

```{r}
#| fig-width: 30
#| fig-height: 35
plot(nigeria_wp_cb_sp, border=gray(.5))
plot.mst(nglga.mst, 
         coordinates(nigeria_wp_cb_sp), 
         col="blue", 
         cex.lab=0.7, 
         cex.circles=0.005, 
         add=TRUE)
```

## 6.4 Computing spatially constrained clusters using SKATER method

The code chunk below is used to compute the spatially constrained clusters using ***skater()*** of **spdep** packages.

```{r}
skclust4 <- skater(edges = nglga.mst[,1:2], 
                 data = lga_ict.z, 
                 method = "euclidean", 
                 ncuts = 3)
```

```{r}
str(skclust4)
```

The code chunk below is used to calculate the observations in each cluster.

```{r}
cls <- skclust4$groups
table(cls)
```

### 6.3.3 Visualising the clusters in choropleth map

The code chunk below is used to plot the clusters derived by SKATER method.

```{r}
groups_mat <- as.matrix(cls)
nigeria_wp_sf_spatialcluster <- cbind(nigeria_wp_cb, as.factor(groups_mat)) %>%
  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)
skatercluster_plot <- tm_shape(nigeria_wp_sf_spatialcluster) +
  tm_polygons("SP_CLUSTER", title = "SKATER Clusters", palette = "RdYlBu") +
  tm_layout(main.title = "Spatially Constrained Clustering-SKATER",
            main.title.position = "center",
            main.title.size = 0.8,
            legend.height = 0.3, 
            legend.width = 0.2,
            legend.text.size = 0.6,
            legend.title.size = 1,
            frame = TRUE) +
  tm_borders(alpha = 0.5)
skatercluster_plot
```

# 7. Spatially Constrained Clustering: ClustGeo Method

In this section, we are going to use **ClustGeo** package to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis.

## 7.1 Ward-like hierarchical clustering: ClustGeo

To perform non-spatially constrained hierarchical cluster, we only need to provide the function a dissimilarity matrix as shown in the code chunk below.

```{r}
nongeo_cluster <- hclustgeo(proxmat)
plot(nongeo_cluster, cex = 0.5)
rect.hclust(nongeo_cluster, 
            k = 4, 
            border = 2:5)
```

### 7.1.1 Mapping the clusters formed

```{r}
groups <- as.factor(cutree(nongeo_cluster, k=4))
nigeria_wp_sf_ngeo_cluster <- cbind(nigeria_wp, as.matrix(groups)) %>%
  rename(`Ward-Like HCLUSTER` = `as.matrix.groups.`)
wardlikehcluster_plot <- tm_shape(nigeria_wp_sf_ngeo_cluster) +
  tm_polygons("Ward-Like HCLUSTER", title = "Ward-Like Hierarchical Clusters", palette = "RdYlBu") +
  tm_layout(main.title = "Non-Spatially Constrained Clustering-ClustGeo",
            main.title.position = "center",
            main.title.size = 0.8,
            legend.height = 0.3, 
            legend.width = 0.2,
            legend.text.size = 0.6,
            legend.title.size = 1,
            frame = TRUE) +
  tm_borders(alpha = 0.5)
wardlikehcluster_plot
```

## 7.2 Spatially Constrained Clustering

A spatial distance matrix will be derived by using `st_distance()` of **sf** package before we perform spatially constrained hierarchical clustering.

```{r}
dist <- st_distance(nigeria_wp, nigeria_wp)
distmat <- as.dist(dist)
```

Next, `choicealpha` will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below.

```{r}
cr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=4, graph = TRUE)
```

```{r}
clustG <- hclustgeo(proxmat, distmat, alpha = 0.3)
groups <- as.factor(cutree(clustG, k=4))
nigeria_wp_Gcluster <- cbind(nigeria_wp, as.matrix(groups)) %>%
  rename(`Geo CLUSTER` = `as.matrix.groups.`)
```

The code chunk below is used to plot the newly-derived clusters,

```{r}
Geocluster_plot <- tm_shape(nigeria_wp_Gcluster) +
  tm_polygons("Geo CLUSTER", title = "Geo Hierarchical Clusters", palette = "RdYlBu") +
  tm_layout(main.title = "Spatially Constrained Clustering-ClustGeo",
            main.title.position = "center",
            main.title.size = 0.8,
            legend.height = 0.3, 
            legend.width = 0.2,
            legend.text.size = 0.6,
            legend.title.size = 1,
            frame = TRUE) +
  tm_borders(alpha = 0.5)
Geocluster_plot
```

# 8. Visualisation on all clustering

The code chunk below is used to plot the clusters result together.

```{r}
#| warning: false
tmap_arrange(hcluster_plot, kmcluster_plot, skatercluster_plot,
             wardlikehcluster_plot, Geocluster_plot,
             nrow = 3,
             ncol = 2)
```

# 9. Acknowledgement

Thanks Prof.Kam for the course materials and resourses. And thanks Jordan for the data wrangling part!
